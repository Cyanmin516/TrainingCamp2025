
# push branch
git push --set-upstream origin virt_Tseng
git push -u origin lab-interface-Wang

# pull request remote merge collision
git branch --set-upstream-to=origin/main main
git pull --set-upstream origin main
git pull

# merge without push branch
git switch main
git merge security-Hung
git push origin main

# not commit and switch branch , have worng atrack file 
git restore --staged file.md


#remove file tracking 
git rm -r --cached filename

#merge branch 
git checkout <your_target_branch> # e.g., git checkout main or git checkout develop
git merge feature-branch-1 feature-branch-2 feature-branch-3

當你想改變你正在工作的分支，讓你的工作目錄反映那個分支的內容時，就用 git checkout (或 git switch)。如果你使用的是較新的 Git 版本，推薦使用 git switch 來進行分支的創建和切換，讓 git checkout 專門用於恢復檔案。

#gir rm --cached
搭配 .gitignore 使用：先用 git rm --cached 移除，再把該檔案加入 .gitignore，讓 Git 之後忽略它。

#git checkout main
#git pull origin main 
#git checkout branch
#git merge main
將main 狀態更新到 branch


#git-stash - Stash the changes in a dirty working directory away
1. Stash the changes from the wrong branch:
    git stash push -m "Accidental work on wrong branch"
2. Switch to the correct branch:
    git checkout your-correct-branch
3. Apply and remove the stashed changes:
    git stash pop

# git .gitignore to branch
git status 
// where u are, if not go next
git checkout <yourbranch-name>
git checkout main -- .gitignore
git status
git add .gitignore
git commit -m "Merge .gitignore from main"


git restore --source=HEAD --staged --worktree # 復原main
git checkout --ours <file>   # 保留 main 的版本
git checkout --theirs <file> # 接受 branch 的版本（可能是刪除）
#找不到



#main 提取 branch commit files
git checkout main
git log route-Chen
git cherry-pick 21bf9456d5b6cbb94fa436e0d4a438c9851b187c

解決衝突： 打開有衝突的檔案，手動編輯並選擇要保留的內容。
標記解決： 執行 git add . 來將解決後的檔案加入暫存區。
完成 cherry-pick： 執行 git cherry-pick --continue 來完成操作。
取消操作 (如果需要)： 如果您決定不要這個 commit 了，可以執行 git cherry-pick --abort 來取消整個操作。
git commit -m "cherry-pick route-Chen {A, b}"